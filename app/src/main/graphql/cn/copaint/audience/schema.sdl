type AuthingUserInfo {
    id: String!
    nickname: String
    gender: String
    photo: String
    biography: String
    birthdate: String
    country: String
    province: String
    city: String
}"""
TagWhereInput is used for filtering Tag objects.
Input was generated by ent.
"""
input TagWhereInput {
  not: TagWhereInput
  and: [TagWhereInput!]
  or: [TagWhereInput!]

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """paintings edge predicates"""
  hasPaintings: Boolean
  hasPaintingsWith: [PaintingWhereInput!]
}

"""
HistoryWhereInput is used for filtering History objects.
Input was generated by ent.
"""
input HistoryWhereInput {
  not: HistoryWhereInput
  and: [HistoryWhereInput!]
  or: [HistoryWhereInput!]

  """sequence field predicates"""
  sequence: Int
  sequenceNEQ: Int
  sequenceIn: [Int!]
  sequenceNotIn: [Int!]
  sequenceGT: Int
  sequenceGTE: Int
  sequenceLT: Int
  sequenceLTE: Int

  """type field predicates"""
  type: Int
  typeNEQ: Int
  typeIn: [Int!]
  typeNotIn: [Int!]
  typeGT: Int
  typeGTE: Int
  typeLT: Int
  typeLTE: Int

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """painting edge predicates"""
  hasPainting: Boolean
  hasPaintingWith: [PaintingWhereInput!]
}

"""
PaintingWhereInput is used for filtering Painting objects.
Input was generated by ent.
"""
input PaintingWhereInput {
  not: PaintingWhereInput
  and: [PaintingWhereInput!]
  or: [PaintingWhereInput!]

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """creator field predicates"""
  creator: String
  creatorNEQ: String
  creatorIn: [String!]
  creatorNotIn: [String!]
  creatorGT: String
  creatorGTE: String
  creatorLT: String
  creatorLTE: String
  creatorContains: String
  creatorHasPrefix: String
  creatorHasSuffix: String
  creatorEqualFold: String
  creatorContainsFold: String

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String

  """painting_status field predicates"""
  paintingStatus: PaintingStatus
  paintingStatusNEQ: PaintingStatus
  paintingStatusIn: [PaintingStatus!]
  paintingStatusNotIn: [PaintingStatus!]

  """history_size field predicates"""
  historySize: Int
  historySizeNEQ: Int
  historySizeIn: [Int!]
  historySizeNotIn: [Int!]
  historySizeGT: Int
  historySizeGTE: Int
  historySizeLT: Int
  historySizeLTE: Int

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """tags edge predicates"""
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]

  """histories edge predicates"""
  hasHistories: Boolean
  hasHistoriesWith: [HistoryWhereInput!]
}

"""
FollowerWhereInput is used for filtering Follower objects.
Input was generated by ent.
"""
input FollowerWhereInput {
  not: FollowerWhereInput
  and: [FollowerWhereInput!]
  or: [FollowerWhereInput!]

  """user_id field predicates"""
  userID: String
  userIDNEQ: String
  userIDIn: [String!]
  userIDNotIn: [String!]
  userIDGT: String
  userIDGTE: String
  userIDLT: String
  userIDLTE: String
  userIDContains: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDEqualFold: String
  userIDContainsFold: String

  """follower_id field predicates"""
  followerID: String
  followerIDNEQ: String
  followerIDIn: [String!]
  followerIDNotIn: [String!]
  followerIDGT: String
  followerIDGTE: String
  followerIDLT: String
  followerIDLTE: String
  followerIDContains: String
  followerIDHasPrefix: String
  followerIDHasSuffix: String
  followerIDEqualFold: String
  followerIDContainsFold: String

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}

"""
TopUpOrderWhereInput is used for filtering TopUpOrder objects.
Input was generated by ent.
"""
input TopUpOrderWhereInput {
  not: TopUpOrderWhereInput
  and: [TopUpOrderWhereInput!]
  or: [TopUpOrderWhereInput!]

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """top_up_order_status field predicates"""
  topUpOrderStatus: TopUpOrderStatus
  topUpOrderStatusNEQ: TopUpOrderStatus
  topUpOrderStatusIn: [TopUpOrderStatus!]
  topUpOrderStatusNotIn: [TopUpOrderStatus!]

  """top_up_order_payment_method field predicates"""
  topUpOrderPaymentMethod: TopUpOrderPaymentMethod
  topUpOrderPaymentMethodNEQ: TopUpOrderPaymentMethod
  topUpOrderPaymentMethodIn: [TopUpOrderPaymentMethod!]
  topUpOrderPaymentMethodNotIn: [TopUpOrderPaymentMethod!]
  topUpOrderPaymentMethodIsNil: Boolean
  topUpOrderPaymentMethodNotNil: Boolean

  """amount field predicates"""
  amount: Float
  amountNEQ: Float
  amountIn: [Float!]
  amountNotIn: [Float!]
  amountGT: Float
  amountGTE: Float
  amountLT: Float
  amountLTE: Float

  """alipay_trade_no field predicates"""
  alipayTradeNo: String
  alipayTradeNoNEQ: String
  alipayTradeNoIn: [String!]
  alipayTradeNoNotIn: [String!]
  alipayTradeNoGT: String
  alipayTradeNoGTE: String
  alipayTradeNoLT: String
  alipayTradeNoLTE: String
  alipayTradeNoContains: String
  alipayTradeNoHasPrefix: String
  alipayTradeNoHasSuffix: String
  alipayTradeNoIsNil: Boolean
  alipayTradeNoNotNil: Boolean
  alipayTradeNoEqualFold: String
  alipayTradeNoContainsFold: String

  """wechat_pay_trade_no field predicates"""
  wechatPayTradeNo: String
  wechatPayTradeNoNEQ: String
  wechatPayTradeNoIn: [String!]
  wechatPayTradeNoNotIn: [String!]
  wechatPayTradeNoGT: String
  wechatPayTradeNoGTE: String
  wechatPayTradeNoLT: String
  wechatPayTradeNoLTE: String
  wechatPayTradeNoContains: String
  wechatPayTradeNoHasPrefix: String
  wechatPayTradeNoHasSuffix: String
  wechatPayTradeNoIsNil: Boolean
  wechatPayTradeNoNotNil: Boolean
  wechatPayTradeNoEqualFold: String
  wechatPayTradeNoContainsFold: String

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [WalletWhereInput!]

  """balanceRecord edge predicates"""
  hasBalanceRecord: Boolean
  hasBalanceRecordWith: [BalanceRecordWhereInput!]
}

"""
WalletWhereInput is used for filtering Wallet objects.
Input was generated by ent.
"""
input WalletWhereInput {
  not: WalletWhereInput
  and: [WalletWhereInput!]
  or: [WalletWhereInput!]

  """user_id field predicates"""
  userID: String
  userIDNEQ: String
  userIDIn: [String!]
  userIDNotIn: [String!]
  userIDGT: String
  userIDGTE: String
  userIDLT: String
  userIDLTE: String
  userIDContains: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDEqualFold: String
  userIDContainsFold: String

  """income field predicates"""
  income: Float
  incomeNEQ: Float
  incomeIn: [Float!]
  incomeNotIn: [Float!]
  incomeGT: Float
  incomeGTE: Float
  incomeLT: Float
  incomeLTE: Float

  """balance field predicates"""
  balance: Float
  balanceNEQ: Float
  balanceIn: [Float!]
  balanceNotIn: [Float!]
  balanceGT: Float
  balanceGTE: Float
  balanceLT: Float
  balanceLTE: Float

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """topUpOrders edge predicates"""
  hasTopUpOrders: Boolean
  hasTopUpOrdersWith: [TopUpOrderWhereInput!]

  """balanceRecords edge predicates"""
  hasBalanceRecords: Boolean
  hasBalanceRecordsWith: [BalanceRecordWhereInput!]
}

"""
BalanceRecordWhereInput is used for filtering BalanceRecord objects.
Input was generated by ent.
"""
input BalanceRecordWhereInput {
  not: BalanceRecordWhereInput
  and: [BalanceRecordWhereInput!]
  or: [BalanceRecordWhereInput!]

  """balance_record_type field predicates"""
  balanceRecordType: BalanceRecordType
  balanceRecordTypeNEQ: BalanceRecordType
  balanceRecordTypeIn: [BalanceRecordType!]
  balanceRecordTypeNotIn: [BalanceRecordType!]

  """balance_record_action field predicates"""
  balanceRecordAction: BalanceRecordAction
  balanceRecordActionNEQ: BalanceRecordAction
  balanceRecordActionIn: [BalanceRecordAction!]
  balanceRecordActionNotIn: [BalanceRecordAction!]

  """balance field predicates"""
  balance: Float
  balanceNEQ: Float
  balanceIn: [Float!]
  balanceNotIn: [Float!]
  balanceGT: Float
  balanceGTE: Float
  balanceLT: Float
  balanceLTE: Float

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """wallet edge predicates"""
  hasWallet: Boolean
  hasWalletWith: [WalletWhereInput!]

  """topUpOrder edge predicates"""
  hasTopUpOrder: Boolean
  hasTopUpOrderWith: [TopUpOrderWhereInput!]
}

"""
ProposalWhereInput is used for filtering Proposal objects.
Input was generated by ent.
"""
input ProposalWhereInput {
  not: ProposalWhereInput
  and: [ProposalWhereInput!]
  or: [ProposalWhereInput!]

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time

  """proposal_status field predicates"""
  proposalStatus: ProposalStatus
  proposalStatusNEQ: ProposalStatus
  proposalStatusIn: [ProposalStatus!]
  proposalStatusNotIn: [ProposalStatus!]

  """proposal_type field predicates"""
  proposalType: ProposalType
  proposalTypeNEQ: ProposalType
  proposalTypeIn: [ProposalType!]
  proposalTypeNotIn: [ProposalType!]

  """creator field predicates"""
  creator: String
  creatorNEQ: String
  creatorIn: [String!]
  creatorNotIn: [String!]
  creatorGT: String
  creatorGTE: String
  creatorLT: String
  creatorLTE: String
  creatorContains: String
  creatorHasPrefix: String
  creatorHasSuffix: String
  creatorEqualFold: String
  creatorContainsFold: String

  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String

  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String

  """color_model field predicates"""
  colorModel: String
  colorModelNEQ: String
  colorModelIn: [String!]
  colorModelNotIn: [String!]
  colorModelGT: String
  colorModelGTE: String
  colorModelLT: String
  colorModelLTE: String
  colorModelContains: String
  colorModelHasPrefix: String
  colorModelHasSuffix: String
  colorModelEqualFold: String
  colorModelContainsFold: String

  """size field predicates"""
  size: String
  sizeNEQ: String
  sizeIn: [String!]
  sizeNotIn: [String!]
  sizeGT: String
  sizeGTE: String
  sizeLT: String
  sizeLTE: String
  sizeContains: String
  sizeHasPrefix: String
  sizeHasSuffix: String
  sizeEqualFold: String
  sizeContainsFold: String

  """balance field predicates"""
  balance: Int
  balanceNEQ: Int
  balanceIn: [Int!]
  balanceNotIn: [Int!]
  balanceGT: Int
  balanceGTE: Int
  balanceLT: Int
  balanceLTE: Int

  """stock field predicates"""
  stock: Int
  stockNEQ: Int
  stockIn: [Int!]
  stockNotIn: [Int!]
  stockGT: Int
  stockGTE: Int
  stockLT: Int
  stockLTE: Int

  """proposal_user_id field predicates"""
  proposalUserID: String
  proposalUserIDNEQ: String
  proposalUserIDIn: [String!]
  proposalUserIDNotIn: [String!]
  proposalUserIDGT: String
  proposalUserIDGTE: String
  proposalUserIDLT: String
  proposalUserIDLTE: String
  proposalUserIDContains: String
  proposalUserIDHasPrefix: String
  proposalUserIDHasSuffix: String
  proposalUserIDIsNil: Boolean
  proposalUserIDNotNil: Boolean
  proposalUserIDEqualFold: String
  proposalUserIDContainsFold: String

  """expired_at field predicates"""
  expiredAt: Time
  expiredAtNEQ: Time
  expiredAtIn: [Time!]
  expiredAtNotIn: [Time!]
  expiredAtGT: Time
  expiredAtGTE: Time
  expiredAtLT: Time
  expiredAtLTE: Time

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """examples edge predicates"""
  hasExamples: Boolean
  hasExamplesWith: [AttachmentWhereInput!]

  """waitingLists edge predicates"""
  hasWaitingLists: Boolean
  hasWaitingListsWith: [WaitingListWhereInput!]
}

"""
AttachmentWhereInput is used for filtering Attachment objects.
Input was generated by ent.
"""
input AttachmentWhereInput {
  not: AttachmentWhereInput
  and: [AttachmentWhereInput!]
  or: [AttachmentWhereInput!]

  """key field predicates"""
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String

  """type field predicates"""
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """proposal edge predicates"""
  hasProposal: Boolean
  hasProposalWith: [ProposalWhereInput!]
}

"""
WaitingListWhereInput is used for filtering WaitingList objects.
Input was generated by ent.
"""
input WaitingListWhereInput {
  not: WaitingListWhereInput
  and: [WaitingListWhereInput!]
  or: [WaitingListWhereInput!]

  """user_id field predicates"""
  userID: String
  userIDNEQ: String
  userIDIn: [String!]
  userIDNotIn: [String!]
  userIDGT: String
  userIDGTE: String
  userIDLT: String
  userIDLTE: String
  userIDContains: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDEqualFold: String
  userIDContainsFold: String

  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """proposal edge predicates"""
  hasProposal: Boolean
  hasProposalWith: [ProposalWhereInput!]
}
type Follower implements Node {
    id: ID!
    userID: String!
    followerID: String!
}

type FollowerConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [FollowerEdge]
}

type FollowerEdge {
    node: Follower
    cursor: Cursor!
}

enum FollowerOrderField {
    CREATED_AT
}

input FollowerOrder {
    direction: OrderDirection!
    field: FollowerOrderField
}

input FollowInfoInput {
    userID: String!
}

type FollowInfo {
    followingCount: Int!
    followersCount: Int!
}interface Node {
    id: ID!
}
enum PaintingStatus {
    IN_PROGRESS
    BAN
    REVIEW
    COMPLETED
}

type Tag implements Node {
    id: ID!
    name: String!
    createdAt: Time
}

type Painting implements Node {
    id: ID!
    creator: String!
    name: String!
    description: String!
    paintingStatus: PaintingStatus!
    historySize: Int!
    tags: [Tag!]
    createdAt: Time
    updatedAt: Time
}

type PaintingConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [PaintingEdge]
}

type PaintingEdge {
    node: Painting
    cursor: Cursor!
}

input PaintingOrder {
    direction: OrderDirection!
    field: PaintingOrderField
}

input CreatePaintingInput {
    name: String!
    description: String!
    tagIDs: [ID!]
}

input UpdatePaintingInput {
    name: String
    description: String
    addTagIDs: [ID!]
    removeTagIDs: [ID!]
}

"""The following enums are matched the entgql annotations in the ent/schema."""
enum PaintingOrderField {
    CREATED_AT
    UPDATED_AT
    CREATOR
    STATUS
    HISTORY_SIZE
}

input GetOrCreateTagsInput {
    tagName: [String!]!
}enum ProposalStatus  {
    WAITING
    SUCCESS
    FAILED
}

enum ProposalType {
    PUBLIC
    PRIVATE
}"""Maps a Time GraphQL scalar to a Go time.Time struct."""
scalar Time

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

enum OrderDirection {
    ASC
    DESC
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: Cursor
    endCursor: Cursor
}

type Query {
    """Node"""
    node(id: ID!): Node
    nodes(ids: [ID!]!): [Node]!
    """Painting"""
    paintings(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: PaintingOrder
        where: PaintingWhereInput,
    ): PaintingConnection
    """Follower"""
    followers(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: FollowerOrder
        where: FollowerWhereInput,
    ): FollowerConnection
    followInfo(input: FollowInfoInput): FollowInfo!
    """Wallet"""
    wallet: Wallet!
    topUpOrder(topUpOrderID: ID!):TopUpOrder!
    topUpOrderPayment(topUpOrderID: ID!, method: TopUpOrderPaymentMethod!): PaymentInfo!
    balanceRecords(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: BalanceRecordOrder
        where: BalanceRecordWhereInput
    ): BalanceRecordConnection
    """Authing API"""
    authingUsersInfo(authingIDs: [String!]!): [AuthingUserInfo!]!
}

type Mutation {
    """Painting"""
    createPainting(input: CreatePaintingInput!): Painting!
    updatePainting(id: ID!, input: UpdatePaintingInput!): Painting!
    updatePaintings(ids: [ID!]!, input:UpdatePaintingInput!): [Painting!]!
    getOrCreateTags(input: GetOrCreateTagsInput): [Tag!]!
    """Follower"""
    followUser(userID: String!): Follower!
    unfollowUser(userID: String!): Int!
    removeFollower(userID: String!): Int!
    """Wallet"""
    createTopUpOrder(amount: Float!): TopUpOrder!
}
enum TopUpOrderStatus {
    UNPAID
    PAID
}

enum TopUpOrderPaymentMethod {
    ALIPAY
    WECHAT_PAY
}

enum BalanceRecordAction {
    TOP_UP
    TRANSACTION
}

enum BalanceRecordType {
    OBTAIN
    CONSUME
}

enum BalanceRecordOrderField {
    CREATED_AT
}

input BalanceRecordOrder {
    direction: OrderDirection!
    field: BalanceRecordOrderField
}

type BalanceRecordConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [BalanceRecordEdge]
}

type BalanceRecordEdge {
    node: BalanceRecord
    cursor: Cursor!
}

type Wallet implements Node {
    id: ID!
    userID: String!
    income: Float!
    balance: Float!
}

type TopUpOrder implements Node {
    id:ID!
    topUpOrderStatus: TopUpOrderStatus!
    amount: Float!
    topUpOrderPaymentMethod: TopUpOrderPaymentMethod
    alipayTradeNo: String
    wechatPayTradeNo: String
}

type BalanceRecord implements Node {
    id: ID!
    balanceRecordType: BalanceRecordType!
    balanceRecordAction: BalanceRecordAction!
    balance: Float!
    createdAt: Time!
    topUpOrder: TopUpOrder
}

type PaymentInfo {
    result: String!
}